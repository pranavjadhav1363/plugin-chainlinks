{"version":3,"sources":["../src/actions/SEIAction.ts","../src/providers/SEIProvider.ts","../src/index.ts"],"sourcesContent":["import {\r\n    type ActionExample,\r\n    type HandlerCallback,\r\n    elizaLogger,\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    ModelClass,\r\n    type State,\r\n    type Action,\r\n    composeContext,\r\n    generateObject,\r\n} from \"@elizaos/core\";\r\nimport { seiPricetProvider } from \"../providers/SEIProvider\";\r\n\r\n\r\n\r\n\r\n\r\nexport const SEIACTION: Action = {\r\n    name: \"SEIACTION\",\r\n    similes: [\r\n     \"FIND_SEI_PRICE\",\r\n     \"GET_SEI_PRICE\",\r\n        \"SEI_PRICE\",\r\n        \r\n    ],\r\n    validate: async (_runtime: IAgentRuntime, message: Memory) => {\r\n        elizaLogger.log(\"Message:\", message);\r\n        return true;\r\n    },\r\n    description: \"Execute this action to get the price for SEI Token\",\r\n    handler: async (\r\n        runtime: IAgentRuntime,\r\n        message: Memory,\r\n        state: State,\r\n        _options: { [key: string]: unknown },\r\n        callback?: HandlerCallback\r\n    ): Promise<boolean> => {\r\n        \r\n\r\n        try {\r\n           const Price:string = await seiPricetProvider.get(runtime,message,state);\r\n           callback(\r\n            {\r\n                text: `The Price for SEI Token is ${Price}`,\r\n            },\r\n            []\r\n        );\r\n            return true;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error during token swap:\", error);\r\n            const responseMsg = {\r\n                text: `Error during swap: ${error instanceof Error ? error.message : String(error)}`,\r\n            };\r\n            callback?.(responseMsg);\r\n            return false;\r\n        }\r\n    },\r\n    examples:  [\r\n        [\r\n            {\r\n                user: \"{{user1}}\",\r\n                content: {\r\n                    text: \"Can you check the SEI Price?\",\r\n                },\r\n            },\r\n            {\r\n                user: \"{{user2}}\",\r\n                content: {\r\n                    text: \"Sure, let me check SEI Price.\",\r\n                    action: \"SEIACTION\",\r\n                },\r\n            },\r\n        ],\r\n    ]  as ActionExample[][],\r\n} as Action;","import { ethers } from 'ethers';\r\nimport {\r\n    type IAgentRuntime,\r\n    type Memory,\r\n    type Provider,\r\n    type State,\r\n    elizaLogger,\r\n} from \"@elizaos/core\";\r\n\r\n\r\n\r\nasync function getSEIPrice(): Promise<string | undefined> {\r\n  try {\r\n    // Define the address of the Chainlink SEI/USD Price Feed on Arbitrum Mainnet\r\nconst SEI_USD_FEED_ADDRESS = '0xCc9742d77622eE9abBF1Df03530594f9097bDcB3'; // Replace with the full contract address\r\n\r\n// Define the Arbitrum Mainnet RPC URL\r\nconst ARBITRUM_MAINNET_RPC_URL = 'https://arb1.arbitrum.io/rpc';\r\n\r\n// Create a provider to interact with the Ethereum network\r\nconst provider = new ethers.JsonRpcProvider(ARBITRUM_MAINNET_RPC_URL);\r\n\r\n// Define the ABI for the Chainlink Price Feed contract\r\nconst priceFeedABI = [\r\n  'function latestRoundData() view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)',\r\n];\r\n\r\n// Create a contract instance for the Chainlink Price Feed\r\nconst priceFeed = new ethers.Contract(SEI_USD_FEED_ADDRESS, priceFeedABI, provider);\r\n\r\n    // Fetch the latest price data from the Chainlink Price Feed\r\n    const latestRoundData = await priceFeed.latestRoundData();\r\n\r\n    // Extract the price (answer) from the returned data\r\n    const price: bigint = latestRoundData.answer;\r\n\r\n    // Convert the price from its original format to a human-readable number\r\n    const adjustedPrice: number = Number(price) / 1e8;\r\n\r\n    // Log the SEI price formatted to 5 decimal places\r\n    const priceString = `SEI Price: $${adjustedPrice.toFixed(5)}`;\r\n    console.log(priceString);\r\n    return priceString;\r\n  } catch (error) {\r\n    // Handle any errors that occur during the fetch operation\r\n    console.error('Error fetching SEI price:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nconst seiPricetProvider: Provider = {\r\n    get: async (\r\n        runtime: IAgentRuntime,\r\n        _message: Memory,\r\n        _state?: State\r\n    ): Promise<string | undefined |null> => {\r\n        try {\r\n           const Price =  await getSEIPrice();\r\n           return Price;\r\n        } catch (error) {\r\n            elizaLogger.error(\"Error in wallet provider:\", error);\r\n            return null;\r\n        }\r\n    },\r\n};\r\n\r\nexport { seiPricetProvider };","import type { Plugin } from \"@elizaos/core\";\nimport { SEIACTION } from \"./actions/SEIAction\";\nimport { seiPricetProvider } from \"./providers/SEIProvider\";\n\n\n\n\nexport const SEIPlugin: Plugin = {\n    name: \"SEI\",\n    description: \"Plugin which helps you find the Price for the SEI Token using chainlink ABI\",\n    actions: [SEIACTION    ],\n    evaluators: [],\n    providers: [seiPricetProvider],\n};\nexport default SEIPlugin;\n"],"mappings":";AAAA;AAAA,EAGI,eAAAA;AAAA,OAQG;;;ACXP,SAAS,cAAc;AACvB;AAAA,EAKI;AAAA,OACG;AAIP,eAAe,cAA2C;AACxD,MAAI;AAEN,UAAM,uBAAuB;AAG7B,UAAM,2BAA2B;AAGjC,UAAM,WAAW,IAAI,OAAO,gBAAgB,wBAAwB;AAGpE,UAAM,eAAe;AAAA,MACnB;AAAA,IACF;AAGA,UAAM,YAAY,IAAI,OAAO,SAAS,sBAAsB,cAAc,QAAQ;AAG9E,UAAM,kBAAkB,MAAM,UAAU,gBAAgB;AAGxD,UAAM,QAAgB,gBAAgB;AAGtC,UAAM,gBAAwB,OAAO,KAAK,IAAI;AAG9C,UAAM,cAAc,eAAe,cAAc,QAAQ,CAAC,CAAC;AAC3D,YAAQ,IAAI,WAAW;AACvB,WAAO;AAAA,EACT,SAAS,OAAO;AAEd,YAAQ,MAAM,6BAA6B,KAAK;AAAA,EAClD;AACF;AAKA,IAAM,oBAA8B;AAAA,EAChC,KAAK,OACD,SACA,UACA,WACoC;AACpC,QAAI;AACD,YAAM,QAAS,MAAM,YAAY;AACjC,aAAO;AAAA,IACV,SAAS,OAAO;AACZ,kBAAY,MAAM,6BAA6B,KAAK;AACpD,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;;;ADhDO,IAAM,YAAoB;AAAA,EAC7B,MAAM;AAAA,EACN,SAAS;AAAA,IACR;AAAA,IACA;AAAA,IACG;AAAA,EAEJ;AAAA,EACA,UAAU,OAAO,UAAyB,YAAoB;AAC1D,IAAAC,aAAY,IAAI,YAAY,OAAO;AACnC,WAAO;AAAA,EACX;AAAA,EACA,aAAa;AAAA,EACb,SAAS,OACL,SACA,SACA,OACA,UACA,aACmB;AAGnB,QAAI;AACD,YAAM,QAAe,MAAM,kBAAkB,IAAI,SAAQ,SAAQ,KAAK;AACtE;AAAA,QACC;AAAA,UACI,MAAM,8BAA8B,KAAK;AAAA,QAC7C;AAAA,QACA,CAAC;AAAA,MACL;AACI,aAAO;AAAA,IACX,SAAS,OAAO;AACZ,MAAAA,aAAY,MAAM,4BAA4B,KAAK;AACnD,YAAM,cAAc;AAAA,QAChB,MAAM,sBAAsB,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK,CAAC;AAAA,MACtF;AACA,iBAAW,WAAW;AACtB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,UAAW;AAAA,IACP;AAAA,MACI;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,QACV;AAAA,MACJ;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,SAAS;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;AEpEO,IAAM,YAAoB;AAAA,EAC7B,MAAM;AAAA,EACN,aAAa;AAAA,EACb,SAAS,CAAC,SAAa;AAAA,EACvB,YAAY,CAAC;AAAA,EACb,WAAW,CAAC,iBAAiB;AACjC;AACA,IAAO,gBAAQ;","names":["elizaLogger","elizaLogger"]}